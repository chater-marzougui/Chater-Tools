param(
    [Parameter(ValueFromRemainingArguments=$true)]
    [string[]]$Arguments
)

# Help function
function Show-Help {
    Write-Host ""
    Write-Host "Environment Variable Manager" -ForegroundColor Cyan
    Write-Host "============================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "DESCRIPTION:" -ForegroundColor Yellow
    Write-Host "  Simple environment variable manager for the current directory."
    Write-Host "  Stores variables in a local .env file for project-specific configuration."
    Write-Host "  Perfect for managing API keys, paths, and other settings per project."
    Write-Host ""
    Write-Host "USAGE:" -ForegroundColor Yellow
    Write-Host "  chater-env set <name> <value>          # Set an environment variable" -ForegroundColor Green
    Write-Host "  chater-env get <name>                  # Get an environment variable" -ForegroundColor Green
    Write-Host "  chater-env list                        # List all stored variables" -ForegroundColor Green
    Write-Host "  chater-env create		         # Creates empty .env file" -ForegroundColor Green
    Write-Host "  chater-env -h                          # Show this help message" -ForegroundColor Green
    Write-Host "  chater-env help                        # Show this help message" -ForegroundColor Green
    Write-Host ""
    Write-Host "EXAMPLES:" -ForegroundColor Yellow
    Write-Host "  chater-env set API_KEY `"your-secret-key-here`"" -ForegroundColor Green
    Write-Host "  chater-env get API_KEY" -ForegroundColor Green
    Write-Host "  chater-env list" -ForegroundColor Green
    Write-Host ""
    Write-Host "NOTE:" -ForegroundColor Yellow
    Write-Host "  Add .env to your .gitignore to keep secrets safe!" -ForegroundColor Gray
    Write-Host ""
}

function Get-EnvFilePath {
    return Join-Path (Get-Location) ".env"
}

function Create_Env {
    $envFile = Get-EnvFilePath
    
    if (Test-Path $envFile) {
        Write-Host "❌ Error: .env file already exists" -ForegroundColor Red
        Write-Host "Location: $envFile" -ForegroundColor Gray
        return
    }
    
    New-Item -Path $envFile -ItemType File | Out-Null
    Write-Host "✅ Created .env file" -ForegroundColor Green
    Write-Host "Location: $envFile" -ForegroundColor Gray
}

function Read-EnvFile {
    $envFile = Get-EnvFilePath
    $envVars = @{}
    
    if (Test-Path $envFile) {
        $content = Get-Content $envFile -ErrorAction SilentlyContinue
        foreach ($line in $content) {
            if ($line -and $line.Trim() -and -not $line.StartsWith("#")) {
                if ($line -match "^([^=]+)=(.*)$") {
                    $name = $matches[1].Trim()
                    $value = $matches[2].Trim()
                    # Remove quotes if present
                    if (($value.StartsWith('"') -and $value.EndsWith('"')) -or 
                        ($value.StartsWith("'") -and $value.EndsWith("'"))) {
                        $value = $value.Substring(1, $value.Length - 2)
                    }
                    $envVars[$name] = $value
                }
            }
        }
    }
    
    return $envVars
}

function Write-EnvFile {
    param([hashtable]$EnvVars)
    
    $envFile = Get-EnvFilePath
    $lines = @()
    
    # Add header comment
    $lines += "# Environment variables for $(Split-Path (Get-Location) -Leaf)"
    $lines += "# Generated by chater-env on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    $lines += ""
    
    # Sort variables alphabetically and write them
    $sortedKeys = $EnvVars.Keys | Sort-Object
    foreach ($key in $sortedKeys) {
        $value = $EnvVars[$key]
        # Quote values that contain spaces or special characters
        if ($value -match '\s|[&|<>^]') {
            $lines += "$key=`"$value`""
        } else {
            $lines += "$key=$value"
        }
    }
    
    $lines | Out-File -FilePath $envFile -Encoding UTF8
}

function Set-EnvVariable {
    param(
        [string]$Name,
        [string]$Value
    )
    
    if (-not $Name) {
        Write-Host "❌ Error: Variable name is required" -ForegroundColor Red
        Write-Host "Usage: chater-env set <name> <value>" -ForegroundColor Yellow
        return
    }
    
    if (-not $Value) {
        Write-Host "❌ Error: Variable value is required" -ForegroundColor Red
        Write-Host "Usage: chater-env set <name> <value>" -ForegroundColor Yellow
        return
    }
    
    $envVars = Read-EnvFile
    $envVars[$Name] = $Value
    Write-EnvFile -EnvVars $envVars
    
    Write-Host "✅ Set $Name = $Value" -ForegroundColor Green
    
    $envFile = Get-EnvFilePath
    Write-Host "Stored in: $envFile" -ForegroundColor Gray
}

function Get-EnvVariable {
    param([string]$Name)
    
    if (-not $Name) {
        Write-Host "❌ Error: Variable name is required" -ForegroundColor Red
        Write-Host "Usage: chater-env get <name>" -ForegroundColor Yellow
        return
    }
    
    $envVars = Read-EnvFile
    
    if ($envVars.ContainsKey($Name)) {
        Write-Host "$Name = $($envVars[$Name])" -ForegroundColor Green
    } else {
        Write-Host "❌ Variable '$Name' not found" -ForegroundColor Red
        Write-Host "Use 'chater-env list' to see available variables" -ForegroundColor Yellow
    }
}

function Show-EnvVariables {
    $envVars = Read-EnvFile
    $envFile = Get-EnvFilePath
    
    if ($envVars.Count -eq 0) {
        Write-Host "No environment variables found in current directory" -ForegroundColor Yellow
        Write-Host "Use 'chater-env set <name> <value>' to add variables" -ForegroundColor Gray
        return
    }
    
    Write-Host ""
    Write-Host "Environment Variables ($($envVars.Count))" -ForegroundColor Cyan
    Write-Host "================================" -ForegroundColor Cyan
    Write-Host "Location: $envFile" -ForegroundColor Gray
    Write-Host ""
    
    # Find the longest key name for alignment
    $maxKeyLength = ($envVars.Keys | Measure-Object -Property Length -Maximum).Maximum
    
    $sortedKeys = $envVars.Keys | Sort-Object
    foreach ($key in $sortedKeys) {
        $paddedKey = $key.PadRight($maxKeyLength)
        $value = $envVars[$key]
        
        # Truncate long values
        if ($value.Length -gt 50) {
            $value = $value.Substring(0, 47) + "..."
        }
        
        Write-Host "  $paddedKey = " -NoNewline -ForegroundColor Yellow
        Write-Host "$value" -ForegroundColor White
    }
    Write-Host ""
}

# Check for help
if ($Arguments.Count -eq 0 -or ($Arguments.Count -eq 1 -and ($Arguments[0] -eq "-h" -or $Arguments[0] -eq "--h" -or $Arguments[0] -eq "help" -or $Arguments[0] -eq "-Help"))) {
    Show-Help
    return
}

# Parse command
$command = $Arguments[0].ToLower()

try {
    switch ($command) {
        "set" {
            if ($Arguments.Count -lt 3) {
                Write-Host "❌ Error: Missing arguments" -ForegroundColor Red
                Write-Host "Usage: chater-env set <name> <value>" -ForegroundColor Yellow
                return
            }
            $name = $Arguments[1]
            $value = ($Arguments[2..($Arguments.Count-1)]) -join " "
            Set-EnvVariable -Name $name -Value $value
        }
        
        "get" {
            if ($Arguments.Count -lt 2) {
                Write-Host "❌ Error: Missing variable name" -ForegroundColor Red
                Write-Host "Usage: chater-env get <name>" -ForegroundColor Yellow
                return
            }
            Get-EnvVariable -Name $Arguments[1]
        }
        
        "list" {
            Show-EnvVariables
        }

	"create" {
	    Create_Env
	}
        
        default {
            Write-Host "❌ Error: Unknown command '$command'" -ForegroundColor Red
            Write-Host "Available commands: set, get, list" -ForegroundColor Yellow
            Write-Host "Use 'chater-env help' for more information" -ForegroundColor Gray
        }
    }
}
catch {
    Write-Host "❌ Error: $($_.Exception.Message)" -ForegroundColor Red
}